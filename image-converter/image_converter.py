#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç webp –∏ avif –∫–æ–ø–∏–∏ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
"""

import os
import sys
import argparse
from pathlib import Path
from PIL import Image
import pillow_avif  # –î–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ avif
from typing import List, Tuple, Optional
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s'
)
logger = logging.getLogger(__name__)

class ImageConverter:
    """–ö–ª–∞—Å—Å –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"""
    
    # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
    SUPPORTED_INPUT_FORMATS = {'.jpg', '.jpeg', '.png', '.bmp', '.tiff', '.tga', '.gif'}
    SUPPORTED_OUTPUT_FORMATS = {'webp', 'avif'}
    
    def __init__(self, search_dir: str):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞
        
        Args:
            search_dir: –ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
        """
        self.search_dir = Path(search_dir)
        
        if not self.search_dir.exists():
            raise FileNotFoundError(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {self.search_dir}")
        
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω:")
        logger.info(f"  –ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {self.search_dir}")
    
    def find_images(self) -> List[Path]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–∞–ø–∫–µ –∏ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
        
        Returns:
            –°–ø–∏—Å–æ–∫ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
        """
        images = []
        
        for file_path in self.search_dir.rglob('*'):
            if file_path.is_file() and file_path.suffix.lower() in self.SUPPORTED_INPUT_FORMATS:
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ñ–∞–π–ª—ã, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –Ω–∞—Ö–æ–¥—è—Ç—Å—è –≤ –ø–∞–ø–∫–∞—Ö webp –∏–ª–∏ avif
                if 'webp' not in file_path.parts and 'avif' not in file_path.parts:
                    images.append(file_path)
        
        logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏")
        return images
    
    def create_output_dirs(self, image_path: Path) -> Tuple[Path, Path]:
        """
        –°–æ–∑–¥–∞–µ—Ç –ø–∞–ø–∫–∏ webp –∏ avif —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (–ø—É—Ç—å –∫ –ø–∞–ø–∫–µ webp, –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ avif)
        """
        # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É, –≥–¥–µ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        image_dir = image_path.parent
        
        # –°–æ–∑–¥–∞–µ–º –ø—É—Ç–∏ –∫ –ø–æ–¥–ø–∞–ø–∫–∞–º
        webp_dir = image_dir / 'webp'
        avif_dir = image_dir / 'avif'
        
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        webp_dir.mkdir(exist_ok=True)
        avif_dir.mkdir(exist_ok=True)
        
        return webp_dir, avif_dir
    
    def convert_image(self, image_path: Path, output_format: str, quality: int = 80) -> bool:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω–æ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        
        Args:
            image_path: –ü—É—Ç—å –∫ –∏—Å—Ö–æ–¥–Ω–æ–º—É –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—é
            output_format: –§–æ—Ä–º–∞—Ç –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (webp –∏–ª–∏ avif)
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (1-100)
            
        Returns:
            True –µ—Å–ª–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–∞, False –∏–Ω–∞—á–µ
        """
        try:
            # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫–∏ –¥–ª—è –≤—ã—Ö–æ–¥–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            webp_dir, avif_dir = self.create_output_dirs(image_path)
            
            # –í—ã–±–∏—Ä–∞–µ–º –ø–∞–ø–∫—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
            output_dir = webp_dir if output_format == 'webp' else avif_dir
            
            # –û—Ç–∫—Ä—ã–≤–∞–µ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ
            with Image.open(image_path) as img:
                # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ RGB –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                if img.mode in ('RGBA', 'LA', 'P'):
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–∑—Ä–∞—á–Ω–æ—Å—Ç—å –¥–ª—è PNG
                    if img.mode == 'RGBA':
                        img = img.convert('RGBA')
                    else:
                        img = img.convert('RGB')
                
                # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–º—è –≤—ã—Ö–æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
                output_filename = f"{image_path.stem}.{output_format}"
                output_path = output_dir / output_filename
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –≤—ã–±—Ä–∞–Ω–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
                if output_format == 'webp':
                    img.save(output_path, 'WEBP', quality=quality, method=6)
                elif output_format == 'avif':
                    img.save(output_path, 'AVIF', quality=quality)
                else:
                    logger.error(f"–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç: {output_format}")
                    return False
                
                logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ: {image_path.name} -> {output_dir.name}/{output_filename}")
                return True
                
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ {image_path.name}: {e}")
            return False
    
    def convert_all(self, output_formats: List[str] = None, quality: int = 80) -> Tuple[int, int]:
        """
        –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ—Ç –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        
        Args:
            output_formats: –°–ø–∏—Å–æ–∫ —Ñ–æ—Ä–º–∞—Ç–æ–≤ –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: webp –∏ avif)
            quality: –ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è
            
        Returns:
            –ö–æ—Ä—Ç–µ–∂ (—É—Å–ø–µ—à–Ω—ã–µ, –æ–±—â–∏–µ)
        """
        if output_formats is None:
            output_formats = ['webp', 'avif']
        
        images = self.find_images()
        if not images:
            logger.warning("–ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return 0, 0
        
        successful = 0
        total = len(images) * len(output_formats)
        
        logger.info(f"–ù–∞—á–∏–Ω–∞—é –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(output_formats)}")
        
        for i, image_path in enumerate(images, 1):
            logger.info(f"–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é {i}/{len(images)}: {image_path.name}")
            
            for output_format in output_formats:
                if self.convert_image(image_path, output_format, quality):
                    successful += 1
        
        logger.info(f"–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞: {successful}/{total} —Ñ–∞–π–ª–æ–≤")
        return successful, total

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description="–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ webp –∏ avif —Ñ–æ—Ä–º–∞—Ç—ã",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
–ü—Ä–∏–º–µ—Ä—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:
  python image_converter.py /path/to/search
  python image_converter.py /path/to/search --formats webp
  python image_converter.py /path/to/search --quality 90
  python image_converter.py /path/to/search --verbose
        """
    )
    
    parser.add_argument(
        'search_dir',
        help='–ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–≤–∫–ª—é—á–∞—è –ø–æ–¥–ø–∞–ø–∫–∏)'
    )
    
    parser.add_argument(
        '--formats', '-f',
        nargs='+',
        choices=['webp', 'avif'],
        default=['webp', 'avif'],
        help='–§–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: webp avif)'
    )
    
    parser.add_argument(
        '--quality', '-q',
        type=int,
        default=80,
        choices=range(1, 101),
        metavar='[1-100]',
        help='–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: 80)'
    )
    
    parser.add_argument(
        '--verbose', '-v',
        action='store_true',
        help='–ü–æ–¥—Ä–æ–±–Ω—ã–π –≤—ã–≤–æ–¥'
    )
    
    args = parser.parse_args()
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if args.verbose:
        logging.getLogger().setLevel(logging.DEBUG)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–∞–ø–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞
    if not os.path.exists(args.search_dir):
        logger.error(f"–ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {args.search_dir}")
        sys.exit(1)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä
        converter = ImageConverter(args.search_dir)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        successful, total = converter.convert_all(args.formats, args.quality)
        
        if successful == total:
            logger.info("‚úÖ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            logger.info("üìÅ WebP –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö 'webp' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
            logger.info("üìÅ AVIF –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö 'avif' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
        else:
            logger.warning(f"‚ö†Ô∏è –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–æ {successful} –∏–∑ {total} —Ñ–∞–π–ª–æ–≤")
            sys.exit(1)
            
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 