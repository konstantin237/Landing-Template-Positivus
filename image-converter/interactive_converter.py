#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Ö–æ–¥–∏—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –∏ —Å–æ–∑–¥–∞–µ—Ç webp –∏ avif –∫–æ–ø–∏–∏ –≤ –ø–æ–¥–ø–∞–ø–∫–∞—Ö
"""

import os
import sys
from pathlib import Path
from image_converter import ImageConverter
import logging

def get_user_input(prompt: str, default: str = None) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç –≤–≤–æ–¥ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    if default:
        user_input = input(f"{prompt} [{default}]: ").strip()
        return user_input if user_input else default
    else:
        return input(f"{prompt}: ").strip()

def get_yes_no(prompt: str, default: bool = True) -> bool:
    """–ü–æ–ª—É—á–∞–µ—Ç –¥–∞/–Ω–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    default_str = "Y" if default else "N"
    while True:
        response = input(f"{prompt} [{default_str}]: ").strip().lower()
        if not response:
            return default
        if response in ['y', 'yes', '–¥–∞', '–¥']:
            return True
        if response in ['n', 'no', '–Ω–µ—Ç', '–Ω']:
            return False
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 'y' –∏–ª–∏ 'n'")

def get_quality() -> int:
    """–ü–æ–ª—É—á–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    while True:
        try:
            quality = int(input("–ö–∞—á–µ—Å—Ç–≤–æ —Å–∂–∞—Ç–∏—è (1-100) [80]: ").strip() or "80")
            if 1 <= quality <= 100:
                return quality
            else:
                print("–ö–∞—á–µ—Å—Ç–≤–æ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –æ—Ç 1 –¥–æ 100")
        except ValueError:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –æ—Ç 1 –¥–æ 100")

def select_formats() -> list:
    """–ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –≤—ã–±—Ä–∞—Ç—å —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏"""
    print("\nüìÅ –í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç—ã –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    print("1. –¢–æ–ª—å–∫–æ WebP")
    print("2. –¢–æ–ª—å–∫–æ AVIF")
    print("3. WebP –∏ AVIF")
    
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-3) [3]: ").strip() or "3"
        if choice == "1":
            return ["webp"]
        elif choice == "2":
            return ["avif"]
        elif choice == "3":
            return ["webp", "avif"]
        else:
            print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ 1, 2 –∏–ª–∏ 3")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä–∞"""
    print("üñºÔ∏è  –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
    print("=" * 50)
    print("üìÅ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –ø–æ–∏—Å–∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –∏ —Å–æ–∑–¥–∞–Ω–∏–µ webp/avif –∫–æ–ø–∏–π")
    print("üìÇ WebP –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–∞—Ö 'webp' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
    print("üìÇ AVIF –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤ –ø–∞–ø–∫–∞—Ö 'avif' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
    print("=" * 50)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –ø–æ–∏—Å–∫–∞
    while True:
        search_dir = get_user_input("–í–≤–µ–¥–∏—Ç–µ –ø—É—Ç—å –∫ –ø–∞–ø–∫–µ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π")
        if os.path.exists(search_dir):
            break
        else:
            print(f"‚ùå –ü–∞–ø–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {search_dir}")
            if not get_yes_no("–ü–æ–ø—Ä–æ–±–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞?"):
                sys.exit(1)
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç—ã
    formats = select_formats()
    
    # –ü–æ–ª—É—á–∞–µ–º –∫–∞—á–µ—Å—Ç–≤–æ
    print(f"\nüéØ –í—ã–±—Ä–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã: {', '.join(formats).upper()}")
    quality = get_quality()
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\nüìã –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:")
    print(f"  –ü–∞–ø–∫–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞: {search_dir}")
    print(f"  –§–æ—Ä–º–∞—Ç—ã: {', '.join(formats).upper()}")
    print(f"  –ö–∞—á–µ—Å—Ç–≤–æ: {quality}")
    print(f"  WebP –∫–æ–ø–∏–∏: –ø–∞–ø–∫–∏ 'webp' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
    print(f"  AVIF –∫–æ–ø–∏–∏: –ø–∞–ø–∫–∏ 'avif' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
    
    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if not get_yes_no("\n–ù–∞—á–∞—Ç—å –ø–æ–∏—Å–∫ –∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é?"):
        print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
        sys.exit(0)
    
    # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–µ—Ä –∏ –∑–∞–ø—É—Å–∫–∞–µ–º
    try:
        converter = ImageConverter(search_dir)
        
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
        images = converter.find_images()
        if not images:
            print("‚ùå –ò–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            sys.exit(1)
        
        print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π:")
        for i, img_path in enumerate(images, 1):
            print(f"  {i}. {img_path}")
        
        if not get_yes_no(f"\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é {len(images)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π?"):
            print("‚ùå –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞")
            sys.exit(0)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        successful, total = converter.convert_all(formats, quality)
        
        print(f"\n‚úÖ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        print(f"   –£—Å–ø–µ—à–Ω–æ: {successful}/{total} —Ñ–∞–π–ª–æ–≤")
        
        if successful == total:
            print("üéâ –í—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã!")
            print("üìÅ WebP –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö 'webp' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
            print("üìÅ AVIF –∫–æ–ø–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ø–∞–ø–∫–∞—Ö 'avif' —Ä—è–¥–æ–º —Å –æ—Ä–∏–≥–∏–Ω–∞–ª–∞–º–∏")
        else:
            print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ–∞–π–ª—ã –Ω–µ —É–¥–∞–ª–æ—Å—å –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main() 