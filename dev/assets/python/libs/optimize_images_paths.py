#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –ø—É—Ç–µ–π –∫ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º –≤ –ø—Ä–æ–µ–∫—Ç–µ.
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –≤—ã–±–∏—Ä–∞–µ—Ç –Ω–∞–∏–±–æ–ª–µ–µ –ª–µ–≥–∫–∏–π —Ñ–æ—Ä–º–∞—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (original/webp/avif)
–∏ –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø—É—Ç–∏ –≤ —Ñ–∞–π–ª–∞—Ö html, pug, php, scss.
"""

import os
import re
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Optional


class ImageOptimizer:
    def __init__(self):
        # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ –∫–æ—Ä–Ω–µ–≤–æ–π –ø–∞–ø–∫–µ –ø—Ä–æ–µ–∫—Ç–∞ (4 —É—Ä–æ–≤–Ω—è –≤–≤–µ—Ä—Ö –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞)
        # dev/assets/python/libs/optimize_images_paths.py -> BASIC-START-TEMPLATE
        script_path = Path(__file__).resolve()
        self.project_root = script_path.parent.parent.parent.parent.parent
        
        # –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π (–∫—Ä–æ–º–µ svg)
        self.image_extensions = {'.jpg', '.jpeg', '.png', '.gif', '.webp', '.avif', '.bmp', '.tiff'}

    def get_file_size(self, file_path: Path) -> int:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–∞–∑–º–µ—Ä —Ñ–∞–π–ª–∞ –≤ –±–∞–π—Ç–∞—Ö."""
        try:
            return file_path.stat().st_size if file_path.exists() else float('inf')
        except:
            return float('inf')

    def find_image_variants(self, image_path: str) -> Dict[str, Tuple[str, int]]:
        """
        –ù–∞—Ö–æ–¥–∏—Ç –≤—Å–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è (original, webp, avif) –∏ –∏—Ö —Ä–∞–∑–º–µ—Ä—ã.
        –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ª–æ–≤–∞—Ä—å {—Ñ–æ—Ä–º–∞—Ç: (–ø—É—Ç—å, —Ä–∞–∑–º–µ—Ä_–≤_–±–∞–π—Ç–∞—Ö)}
        """
        variants = {}
        
        # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –≤ –∞–±—Å–æ–ª—é—Ç–Ω—ã–π
        # –£–±–∏—Ä–∞–µ–º ./ –≤ –Ω–∞—á–∞–ª–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        clean_path = image_path.lstrip('./')
        abs_image_path = self.project_root / 'dev' / clean_path
        
        print(f"    üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º: {abs_image_path}")
        
        if not abs_image_path.exists():
            print(f"    ‚ùå –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
            return variants
            
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏
        original_size = self.get_file_size(abs_image_path)
        variants['original'] = (image_path, original_size)
        print(f"    ‚úÖ –û—Ä–∏–≥–∏–Ω–∞–ª: {original_size} –±–∞–π—Ç")
        
        # –ò—â–µ–º webp –∏ avif –≤–∞—Ä–∏–∞–Ω—Ç—ã –≤ —Å–æ—Å–µ–¥–Ω–∏—Ö –ø–∞–ø–∫–∞—Ö
        parent_dir = abs_image_path.parent
        filename_without_ext = abs_image_path.stem
        
        for format_name in ['webp', 'avif']:
            format_dir = parent_dir / format_name
            format_file = format_dir / f"{filename_without_ext}.{format_name}"
            
            if format_file.exists():
                # –°–æ–∑–¥–∞–µ–º –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å –¥–ª—è –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ dev/
                try:
                    dev_relative_path = str(format_file.relative_to(self.project_root / 'dev')).replace('\\', '/')
                    size = self.get_file_size(format_file)
                    variants[format_name] = (dev_relative_path, size)
                    print(f"    ‚úÖ {format_name}: {size} –±–∞–π—Ç")
                except ValueError:
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–µ—Ç—Å—è —Å–æ–∑–¥–∞—Ç—å –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω—ã–π –ø—É—Ç—å
                    print(f"    ‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –æ—Ç–Ω–æ—Å–∏—Ç–µ–ª—å–Ω–æ–≥–æ –ø—É—Ç–∏ –¥–ª—è {format_name}")
            else:
                print(f"    ‚ùå {format_name} –Ω–µ –Ω–∞–π–¥–µ–Ω: {format_file}")
        
        return variants

    def get_optimal_image_info(self, variants: Dict[str, Tuple[str, int]]) -> Dict:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π –ø—É—Ç—å –∏ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã."""
        if not variants:
            return {}
            
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–∞–∑–º–µ—Ä—É —Ñ–∞–π–ª–∞ (–º–µ–Ω—å—à–µ = –ª—É—á—à–µ)
        sorted_variants = sorted(variants.items(), key=lambda x: x[1][1])
        
        result = {
            'main_src': sorted_variants[0][1][0],  # –°–∞–º—ã–π –ª–µ–≥–∫–∏–π –≤–∞—Ä–∏–∞–Ω—Ç
            'data_attributes': {}
        }
        
        print(f"    üìä –°–∞–º—ã–π –ª–µ–≥–∫–∏–π: {sorted_variants[0][0]} ({sorted_variants[0][1][1]} –±–∞–π—Ç)")
        
        # –í—Å–µ–≥–¥–∞ –¥–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –∫ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–º webp –∏ avif (–¥–∞–∂–µ –µ—Å–ª–∏ —Ñ–∞–π–ª–æ–≤ –Ω–µ—Ç)
        original_path = variants.get('original', ['', 0])[0]
        if original_path:
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã–µ –ø—É—Ç–∏ –∫ webp –∏ avif
            path_parts = Path(original_path)
            parent = path_parts.parent
            stem = path_parts.stem
            
            # –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –ø—Ä–∞–≤–∏–ª—å–Ω–æ —Å–æ–∑–¥–∞–µ–º –ø—É—Ç–∏, –∏—Å–ø–æ–ª—å–∑—É—è –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏
            potential_webp = str(parent / 'webp' / f'{stem}.webp').replace('\\', '/')
            potential_avif = str(parent / 'avif' / f'{stem}.avif').replace('\\', '/')
            
            # –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –Ω–µ–∑–∞–≤–∏—Å–∏–º–æ –æ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
            result['data_attributes']['data-webp-src'] = potential_webp
            result['data_attributes']['data-avif-src'] = potential_avif
            
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ–∞–ª—å–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
            avif_info = variants.get('avif')
            webp_info = variants.get('webp')
            
            if avif_info and webp_info:
                # –û–±–∞ —Ñ–∞–π–ª–∞ —Å—É—â–µ—Å—Ç–≤—É—é—Ç - —Å—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã
                avif_size = avif_info[1]
                webp_size = webp_info[1]
                
                if avif_size < webp_size:
                    result['data_attributes']['data-avif-priority'] = '1'
                    result['data_attributes']['data-webp-priority'] = '2'
                    print(f"    üèÜ AVIF –ª–µ–≥—á–µ WebP: {avif_size} < {webp_size}")
                else:
                    result['data_attributes']['data-avif-priority'] = '2'
                    result['data_attributes']['data-webp-priority'] = '1'
                    print(f"    üèÜ WebP –ª–µ–≥—á–µ AVIF: {webp_size} < {avif_size}")
            elif avif_info:
                # –¢–æ–ª—å–∫–æ AVIF —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                result['data_attributes']['data-avif-priority'] = '1'
                result['data_attributes']['data-webp-priority'] = '2'
            elif webp_info:
                # –¢–æ–ª—å–∫–æ WebP —Å—É—â–µ—Å—Ç–≤—É–µ—Ç  
                result['data_attributes']['data-avif-priority'] = '2'
                result['data_attributes']['data-webp-priority'] = '1'
            else:
                # –ù–∏ –æ–¥–∏–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç - AVIF –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω–µ–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
                result['data_attributes']['data-avif-priority'] = '1'
                result['data_attributes']['data-webp-priority'] = '2'
        
        return result

    def process_html_php_file(self, file_path: Path) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç HTML/PHP —Ñ–∞–π–ª—ã."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ img —Ç–µ–≥–æ–≤ (–≤–∫–ª—é—á–∞—è —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ —Å data-–∞—Ç—Ä–∏–±—É—Ç–∞–º–∏)
            img_pattern = r'<img([^>]*?)src=["\']([^"\']+\.(jpg|jpeg|png|gif|webp|avif|bmp|tiff))["\']([^>]*?)>'
            
            def replace_img(match):
                before_src = match.group(1)
                image_path = match.group(2)
                extension = match.group(3)
                after_src = match.group(4)
                
                print(f"  üñºÔ∏è –ù–∞–π–¥–µ–Ω img: {image_path}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SVG
                if image_path.lower().endswith('.svg'):
                    return match.group(0)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —Ç–µ–≥ —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω (—Å–æ–¥–µ—Ä–∂–∏—Ç data-webp-src –∏–ª–∏ data-avif-src)
                full_tag = match.group(0)
                if 'data-webp-src=' in full_tag or 'data-avif-src=' in full_tag:
                    print(f"  ‚ö™ –£–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
                    return match.group(0)
                
                variants = self.find_image_variants(image_path)
                if not variants:
                    return match.group(0)
                
                optimal_info = self.get_optimal_image_info(variants)
                if not optimal_info:
                    return match.group(0)
                
                # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ data-–∞—Ç—Ä–∏–±—É—Ç—ã –∏–∑ before_src –∏ after_src –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π
                before_src = re.sub(r'\s+data-(webp|avif)-(src|priority)=["\'][^"\']*["\']', '', before_src)
                after_src = re.sub(r'\s+data-(webp|avif)-(src|priority)=["\'][^"\']*["\']', '', after_src)
                
                # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π —Ç–µ–≥
                new_src = optimal_info['main_src']
                data_attrs = ''
                
                for attr_name, attr_value in optimal_info.get('data_attributes', {}).items():
                    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Å–ª—ç—à–∏ –Ω–∞ –ø—Ä—è–º—ã–µ
                    attr_value_fixed = attr_value.replace('\\', '/')
                    data_attrs += f' {attr_name}="{attr_value_fixed}"'
                
                new_tag = f'<img{before_src}src="{new_src}"{after_src}{data_attrs}>'
                print(f"  ‚úÖ –ó–∞–º–µ–Ω–µ–Ω –Ω–∞: {new_tag}")
                return new_tag
            
            content = re.sub(img_pattern, replace_img, content, flags=re.IGNORECASE)
            
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            
            return False
        
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            return False

    def process_pug_file(self, file_path: Path) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç PUG —Ñ–∞–π–ª—ã."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –ò—â–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ —Å src="image"
            lines = content.split('\n')
            new_lines = []
            
            i = 0
            while i < len(lines):
                line = lines[i]
                
                # –ò—â–µ–º img( –≤ —Å—Ç—Ä–æ–∫–µ
                if 'img(' in line:
                    # –ò—â–µ–º src –≤ —ç—Ç–æ–π —Å—Ç—Ä–æ–∫–µ –∏–ª–∏ —Å–ª–µ–¥—É—é—â–∏—Ö
                    img_block_lines = [line]
                    src_match = None
                    img_block_end_index = i  # –ò–Ω–¥–µ–∫—Å –ø–æ—Å–ª–µ–¥–Ω–µ–π —Å—Ç—Ä–æ–∫–∏ –±–ª–æ–∫–∞ img
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â—É—é —Å—Ç—Ä–æ–∫—É –Ω–∞ –Ω–∞–ª–∏—á–∏–µ src
                    src_pattern = r'src=["\']([^"\']+\.(jpg|jpeg|png|gif|webp|avif|bmp|tiff))["\']'
                    src_match = re.search(src_pattern, line, re.IGNORECASE)
                    
                    # –ï—Å–ª–∏ src –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–µ–π —Å—Ç—Ä–æ–∫–µ, –∏—â–µ–º –≤ —Å–ª–µ–¥—É—é—â–∏—Ö
                    if not src_match:
                        j = i + 1
                        while j < len(lines):
                            current_line = lines[j]
                            img_block_lines.append(current_line)
                            img_block_end_index = j
                            
                            src_match = re.search(src_pattern, current_line, re.IGNORECASE)
                            if src_match:
                                break
                            
                            # –ï—Å–ª–∏ –Ω–∞—à–ª–∏ –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É, –ø—Ä–µ—Ä—ã–≤–∞–µ–º –ø–æ–∏—Å–∫
                            if ')' in current_line:
                                break
                                
                            j += 1
                    
                    if src_match:
                        image_path = src_match.group(1)
                        print(f"  üñºÔ∏è –ù–∞–π–¥–µ–Ω Pug img: {image_path}")
                        
                        # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SVG
                        if not image_path.lower().endswith('.svg'):
                            variants = self.find_image_variants(image_path)
                            if variants:
                                optimal_info = self.get_optimal_image_info(variants)
                                if optimal_info:
                                    # –ó–∞–º–µ–Ω—è–µ–º src –Ω–∞ –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–π
                                    new_src = optimal_info['main_src']
                                    
                                    # –ó–∞–º–µ–Ω—è–µ–º src –≤–æ –≤—Å–µ–º –±–ª–æ–∫–µ
                                    for k in range(len(img_block_lines)):
                                        img_block_lines[k] = img_block_lines[k].replace(image_path, new_src)
                                    
                                    # –î–æ–±–∞–≤–ª—è–µ–º data-–∞—Ç—Ä–∏–±—É—Ç—ã –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                                    data_attrs = optimal_info.get('data_attributes', {})
                                    if data_attrs:
                                        # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É —Å –∑–∞–∫—Ä—ã–≤–∞—é—â–µ–π —Å–∫–æ–±–∫–æ–π
                                        for k in range(len(img_block_lines)):
                                            if ')' in img_block_lines[k]:
                                                # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç—Å—Ç—É–ø (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ —É img —Å—Ç—Ä–æ–∫–∏)
                                                base_indent = len(img_block_lines[0]) - len(img_block_lines[0].lstrip())
                                                attr_indent = ' ' * (base_indent + 12)  # +12 –ø—Ä–æ–±–µ–ª–æ–≤ –¥–ª—è –≤—ã—Ä–∞–≤–Ω–∏–≤–∞–Ω–∏—è –∞—Ç—Ä–∏–±—É—Ç–æ–≤
                                                
                                                # –£–±–∏—Ä–∞–µ–º —Å–∫–æ–±–∫—É –∏–∑ —Å—Ç—Ä–æ–∫–∏
                                                img_block_lines[k] = img_block_lines[k].replace(')', '').rstrip()
                                                
                                                # –î–æ–±–∞–≤–ª—è–µ–º –∞—Ç—Ä–∏–±—É—Ç—ã —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏
                                                attrs_to_add = []
                                                for attr_name, attr_value in data_attrs.items():
                                                    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø—Ä—è–º—ã–µ —Å–ª—ç—à–∏ –¥–ª—è –≤—Å–µ—Ö –ø—É—Ç–µ–π
                                                    attr_value_fixed = attr_value.replace('\\', '/')
                                                    attrs_to_add.append(f'{attr_indent}{attr_name}="{attr_value_fixed}"')
                                                
                                                # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–∫—Ä—ã–≤–∞—é—â—É—é —Å–∫–æ–±–∫—É —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –æ—Ç—Å—Ç—É–ø–æ–º
                                                attrs_to_add.append(f'{attr_indent})')
                                                
                                                # –ó–∞–º–µ–Ω—è–µ–º –ø–æ—Å–ª–µ–¥–Ω—é—é —Å—Ç—Ä–æ–∫—É –±–ª–æ–∫–∞ –Ω–∞ —Å—Ç—Ä–æ–∫—É –±–µ–∑ —Å–∫–æ–±–∫–∏
                                                # –∏ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –∞—Ç—Ä–∏–±—É—Ç—ã
                                                img_block_lines = img_block_lines[:k+1] + attrs_to_add
                                                break
                                    
                                    print(f"  ‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω Pug –±–ª–æ–∫")
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ —Å—Ç—Ä–æ–∫–∏ img –±–ª–æ–∫–∞
                    new_lines.extend(img_block_lines)
                    # –ü–µ—Ä–µ–º–µ—â–∞–µ–º —É–∫–∞–∑–∞—Ç–µ–ª—å –Ω–∞ —Å–ª–µ–¥—É—é—â—É—é —Å—Ç—Ä–æ–∫—É –ø–æ—Å–ª–µ –±–ª–æ–∫–∞
                    i = img_block_end_index + 1
                else:
                    # –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ img —Å—Ç—Ä–æ–∫–∞, –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –µ—ë
                    new_lines.append(line)
                    i += 1
            
            new_content = '\n'.join(new_lines)
            
            if new_content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(new_content)
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            return False

    def process_scss_file(self, file_path: Path) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç SCSS —Ñ–∞–π–ª—ã."""
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            original_content = content
            
            # –ü–∞—Ç—Ç–µ—Ä–Ω –¥–ª—è –ø–æ–∏—Å–∫–∞ url() –≤ SCSS
            url_pattern = r'url\(["\']?([^"\'()]+\.(jpg|jpeg|png|gif|webp|avif|bmp|tiff))["\']?\)'
            
            def replace_url(match):
                image_path = match.group(1)
                
                print(f"  üñºÔ∏è –ù–∞–π–¥–µ–Ω SCSS url: {image_path}")
                
                # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º SVG
                if image_path.lower().endswith('.svg'):
                    return match.group(0)
                
                variants = self.find_image_variants(image_path)
                if not variants:
                    return match.group(0)
                
                optimal_info = self.get_optimal_image_info(variants)
                if not optimal_info:
                    return match.group(0)
                
                new_path = optimal_info['main_src']
                new_url = match.group(0).replace(image_path, new_path)
                print(f"  ‚úÖ –ó–∞–º–µ–Ω–µ–Ω –Ω–∞: {new_url}")
                return new_url
            
            content = re.sub(url_pattern, replace_url, content, flags=re.IGNORECASE)
            
            if content != original_content:
                with open(file_path, 'w', encoding='utf-8') as f:
                    f.write(content)
                return True
            
            return False
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file_path}: {e}")
            return False

    def process_file(self, file_path: Path) -> bool:
        """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ–≥–æ —Ç–∏–ø–∞."""
        print(f"\nüìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º: {file_path.relative_to(self.project_root / 'dev')}")
        
        file_extension = file_path.suffix.lower()
        
        if file_extension in ['.html', '.htm', '.php']:
            return self.process_html_php_file(file_path)
        elif file_extension == '.pug':
            return self.process_pug_file(file_path)
        elif file_extension in ['.scss', '.sass']:
            return self.process_scss_file(file_path)
        
        return False

    def run(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Ü–µ—Å—Å –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏."""
        print("üöÄ –ó–∞–ø—É—Å–∫ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π...")
        print(f"üìÅ –ö–æ—Ä–Ω–µ–≤–∞—è –ø–∞–ø–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞: {self.project_root}")
        
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ –ø–∞–ø–∫–µ dev
        dev_folder = self.project_root / 'dev'
        file_patterns = ['**/*.html', '**/*.htm', '**/*.php', '**/*.pug', '**/*.scss', '**/*.sass']
        files_to_process = []
        
        for pattern in file_patterns:
            files_to_process.extend(dev_folder.glob(pattern))
        
        # –ò—Å–∫–ª—é—á–∞–µ–º —Ñ–∞–π–ª—ã –∏–∑ –ø–∞–ø–∫–∏ prod
        files_to_process = [f for f in files_to_process if 'prod' not in f.parts]
        
        if not files_to_process:
            print("‚ö†Ô∏è –ù–µ –Ω–∞–π–¥–µ–Ω—ã —Ñ–∞–π–ª—ã –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏")
            return
        
        print(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Ñ–∞–π–ª–æ–≤ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {len(files_to_process)}")
        
        updated_files = 0
        for file_path in files_to_process:
            if self.process_file(file_path):
                updated_files += 1
                print(f"‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω: {file_path.relative_to(self.project_root / 'dev')}")
            else:
                print(f"‚ö™ –ë–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π: {file_path.relative_to(self.project_root / 'dev')}")
        
        print(f"\n‚ú® –ó–∞–≤–µ—Ä—à–µ–Ω–æ! –û–±–Ω–æ–≤–ª–µ–Ω–æ —Ñ–∞–π–ª–æ–≤: {updated_files} –∏–∑ {len(files_to_process)}")


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    try:
        optimizer = ImageOptimizer()
        optimizer.run()
    except KeyboardInterrupt:
        print("\n‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"\n‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()